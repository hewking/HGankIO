// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url 'https://maven.google.com'
        }

        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        dependencies {
            // ..
        }
    }
    ext.kotlin_version = '1.3.61'
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

ext.dependenciesVersions = [
        'glide'           : '4.11.0',
        'navigation'      : '1.0.0',
        'okhttp'          : '4.4.0',
        'retrofit'        : '2.8.1',
        'rxjava'          : '2.2.6',
        'room'            : '2.2.5',
        'timber'          : '4.7.1',
        'core_ktx'        : '1.3.0',
        'activity_version': '1.1.0',
        'dagger'          : '2.24',
        'lifecycleVersion': '2.2.0-alpha01'
]

ext.versions = [
        'applicationId'    : 'com.hewking.gank',
        'compileSdkVersion': 29,
        'buildToolsVersion': '29.0.3',
        'targetSdkVersion' : 29,
        'minSdkVersion'    : 21,
        'versionCode'      : 1,
        'versionName'      : '0.0.1'
]

task clean(type: Delete) {
    delete rootProject.buildDir
}

task testPrint() {
    doLast {
        def name = "zhangsan"
        def age = 20
        println 'this is a dog'
        println "this is a ${name} age: ${age}"

        def nums = [1, 2, 3, 4, 5]
        println "nums:${nums.getClass().getName()} size:${nums.size()}"
    }
}

def customEach(closure) {
    for (int i = 0; i < 10; i++) {
        closure(i)
    }
}

task testClosure() {
    customEach {
        println "cur : $it"
    }
}

def eachMap(closure) {
    def map = ["name": "zhangsan"]
    map.each {
        closure(it.key, it.value)
    }
}

task testClosure2() {
    doLast {
        eachMap { key, value ->
            println "${key}: ${value}"
        }
    }
}
